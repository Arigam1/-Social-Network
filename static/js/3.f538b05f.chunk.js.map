{"version":3,"sources":["components/Profile/Profileinfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","assets/images/Avatar.png","components/Profile/Profileinfo/ProfileStatusWithHooks.jsx","components/Profile/Profileinfo/ProfileDataForm.jsx","components/Profile/Profileinfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","s","item","src","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","name","component","Textarea","validate","required","MyPosts","React","memo","postElements","posts","reverse","map","p","id","postsBlock","value","addPost","newPostText","connect","state","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","profile","error","style","formSummoryError","createField","Input","type","Object","keys","contacts","key","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","avatar","photos","large","Avatar1","target","files","length","initialValues","formData","then","Profile","MyPostsContainer","ProfileContainer","userId","this","match","params","authoraizedUserId","history","push","getUserProfile","getUserStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","isAuth","auth","withRouter"],"mappings":"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","file":"static/js/3.f538b05f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"ProfileInfo_avatar__YrxCx\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2KwE9\",\"contact\":\"ProfileInfo_contact__2DuIE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2Q_pY\",\"posts\":\"MyPosts_posts__zHQrc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3wObJ\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n\r\n    return (\r\n      <div className={s.item}>\r\n        <img src=\"https://upload.wikimedia.org/wikipedia/commons/a/a8/Grapefruit%2C_half.jpg\" />\r\n        {props.message}\r\n        <div>\r\n          <span>like</span>{props.likesCount}\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field placeholder='Enter your post' name='newPostText' component={Textarea} validate={[required, maxLength10]} />\r\n      </div>\r\n      <div>\r\n        <button>Add</button>\r\n      </div>\r\n    </form>\r\n  )\r\n};\r\n\r\nlet AddNewPostFormRedux = reduxForm({ form: 'ProfileAddNewPostForm' })(AddNewPostForm);\r\n\r\n\r\n\r\nconst MyPosts = React.memo(props => {\r\n  let postElements =\r\n    [...props.posts]      // immutability!!! очень важно в pure function\r\n      .reverse()\r\n      .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount} />)\r\n\r\n\r\n  let onAddPost = (value) => {\r\n    props.addPost(value.newPostText);\r\n  }\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My post</h3>\r\n      <div>\r\n        <AddNewPostFormRedux onSubmit={onAddPost} />\r\n      </div>\r\n      <div className={s.posts}>\r\n        {postElements}\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport { addPostActionCreator } from '../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      dispatch(addPostActionCreator(newPostText))\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPosts);","export default __webpack_public_path__ + \"static/media/Avatar.fb17ea4a.png\";","import React, { useEffect, useState } from 'react';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status)\r\n  },\r\n    [props.status]\r\n  )\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true)\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status)\r\n  };\r\n\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.currentTarget.value)\r\n  };\r\n\r\n\r\n  // state = {\r\n  //   editMode: false,\r\n  //   status: this.props.status,\r\n  // }\r\n\r\n  // activateEditMode = () => {\r\n  //   this.setState({\r\n  //     editMode: true\r\n  //   })    // this.forceUpdate()      На крайняК!\r\n  // }\r\n  // deactivateEditMode = () => {\r\n  //   this.setState({\r\n  //     editMode: false\r\n  //   })    // this.forceUpdate()      На крайняК!\r\n  //   this.props.updateStatus(this.state.status)\r\n  // };\r\n\r\n\r\n  // onStatusChange = (e) => {\r\n  //   this.setState({\r\n  //     status: e.currentTarget.value\r\n  //   })\r\n  // };\r\n\r\n  // componentDidUpdate(prevProps, prevState) {\r\n  //   if (prevProps.status !== this.props.status) {\r\n  //     this.setState({\r\n  //       status: this.props.status\r\n  //     });\r\n  //   }\r\n  // };\r\n\r\n  return (\r\n    <div>\r\n      {!editMode &&\r\n        <div>\r\n          <b>Status</b>: <span onDoubleClick={activateEditMode} >{props.status || '-------'}</span>\r\n        </div>\r\n      }\r\n      {editMode &&\r\n        <div>\r\n          <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status} />\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport style from '../../common/FormsControls/FormsControls.module.css'\r\nimport { reduxForm } from \"redux-form\";\r\nimport { createField, Input, Textarea } from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst ProfileDataForm = ({ handleSubmit, profile, error }) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button>save</button></div>\r\n        {error && <div className={style.formSummoryError}>\r\n            {error}\r\n        </div>\r\n        }\r\n        <div><b>Full name</b>: {createField(\"Full Name\", \"fullname\", Input, [])}</div>\r\n        <div><b>Looking for a job</b>: {createField(\"\", \"LookingForAJob\", Input, [], { type: \"checkbox\" })}</div>\r\n        <div>\r\n            <b>My skills</b>: {createField(\"My skills\", \"LookingForAJobDescription\", Textarea, [])}\r\n        </div>\r\n\r\n        <div><b>About me</b>: {createField(\"About me\", \"AboutMe\", Textarea, [])}</div>\r\n        <div><b>Constacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n                <b>{key}: {createField(key, \"contacts.\" + key, Input, [])}</b>\r\n            </div>\r\n        })}</div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({ form: 'edit-profile' })(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, { useState } from \"react\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport Avatar1 from \"../../../assets/images/Avatar.png\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport ProfileDataFormReduxForm from \"./ProfileDataForm\";\r\n\r\n\r\nconst ProfileInfo = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\r\n\r\n  let [editMode, setEditMode] = useState(false);\r\n\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const onMainPhotoSelected = (e) => {\r\n    if (e.target.files.length) {\r\n      savePhoto(e.target.files[0]);\r\n    }\r\n  }\r\n\r\n\r\n  const onSubmit = (formData) => {\r\n    saveProfile(formData).then(\r\n      () => {\r\n        setEditMode(false);\r\n      }\r\n    );\r\n  }\r\n  return (\r\n    <div>\r\n      <div>\r\n      </div>\r\n      <div className={s.descriptionBlock}>\r\n        <div className={s.avatar}>\r\n          <img src={profile.photos.large || Avatar1} />\r\n          {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\r\n          <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n          {editMode\r\n            ? <ProfileDataFormReduxForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n            : <ProfileData goToEditMode={() => { setEditMode(true) }} profile={profile} isOwner={isOwner} />}\r\n\r\n        </div>\r\n\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nconst ProfileData = ({ profile, isOwner, goToEditMode }) => {\r\n  return <div>\r\n    {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n    <div>\r\n      <b>Full name</b>: {profile.fullName}\r\n    </div>\r\n    <div>\r\n      <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n    </div>\r\n    {profile.lookingForAJob &&\r\n      <div>\r\n        <b>My skills</b>: {profile.lookingForAJobDescription}\r\n      </div>\r\n    }\r\n    <div><b>About me</b>: {profile.aboutMe}</div>\r\n    <div>\r\n      <b>Constacts</b>: {Object.keys(profile.contacts).map(key => {\r\n        return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]} />\r\n      })}</div>\r\n  </div>\r\n}\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n  return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from \"react\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfo from \"./Profileinfo/ProfileInfo\";\r\n\r\nconst Profile = (props) => {\r\n\r\n\r\n  return (\r\n    <div>\r\n      <ProfileInfo saveProfile={props.saveProfile}\r\n        savePhoto={props.savePhoto}\r\n        isOwner={props.isOwner}\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus} />\r\n      <MyPostsContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport { getUserProfile, getUserStatus, updateStatus, savePhoto, saveProfile } from \"../../redux/profile-reducer\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { compose } from 'redux';\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n  refreshProfile() {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authoraizedUserId;\r\n      if (!userId) {\r\n        this.props.history.push(\"/login\");\r\n      }\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getUserStatus(userId);\r\n  }\r\n  componentDidMount() {\r\n    this.refreshProfile()\r\n  }\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    return <Profile {...this.props}\r\n      isOwner={!this.props.match.params.userId}\r\n      profile={this.props.profile}\r\n      status={this.props.status}\r\n      updateStatus={this.props.updateStatus}\r\n      savePhoto={this.props.savePhoto}\r\n      saveProfile={this.props.saveProfile} />;\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  isAuth: state.auth.isAuth,\r\n  authoraizedUserId: state.auth.userId,\r\n});\r\n\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\r\n\r\n// export default connect(mapStateToProps, { getUserProfile })(\r\n//   WithUrlDataContainerComponent\r\n// );\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, { getUserProfile, getUserStatus, updateStatus, savePhoto, saveProfile }),\r\n  withRouter,\r\n)(ProfileContainer);"],"sourceRoot":""}